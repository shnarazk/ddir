//! Types and traits
use std::{collections::HashSet, io};

pub(crate) type BooleanOperator = (Box<dyn Fn(bool, bool) -> bool>, bool);

pub trait DecisionDiagram {
    type Element;
    // return the hashset of all (non)terminal nodes in graph.
    fn all_nodes(&self) -> HashSet<&Self::Element>;
    // return the number of (non)terminal nodes in graph.
    fn len(&self) -> usize;
    fn is_empty(&self) -> bool {
        self.len() == 0
    }
    // write the graph in graphvis format
    fn write_as_gv(&self, sink: impl io::Write) -> io::Result<()>;
}

pub trait DecisionDiagramNode {
    // return a new terminal node
    fn new_constant(b: bool) -> Self;
    // return a new non-terminal node
    fn new_var(var_index: usize, low: Self, high: Self) -> Self;
    fn is_constant(&self) -> Option<bool>;
    // return 0 or 1 for terminal nodes, and `vi + 2` for nonterminal node which var_index is `vi`.
    fn unified_key(&self) -> usize;
    fn var_index(&self) -> Option<usize>;
    fn low(&self) -> Option<&Self>;
    fn high(&self) -> Option<&Self>;
}

pub trait ReducedDecisionDiagram {
    /// convert the current graph to one which is a reduced diagram
    fn reduce(&mut self);
    /// return a new graph generated by apply `op` to this and the other graph
    fn apply(&self, op: Box<dyn Fn(bool, bool) -> bool>, unit: bool, _other: &Self) -> Self;
}
